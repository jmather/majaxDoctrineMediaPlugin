<?php

/**
 * PluginmajaxMediaFileInfo
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class PluginmajaxMediaFileInfo extends BasemajaxMediaFileInfo
{
  public function assignDefaultValues($overwrite = false)
  {
    parent::assignDefaultValues($overwrite);
    $this->uuid = majaxMediaToolbox::uuid('fi:');
    $this->meta_store = serialize(array());
  }
  public function getWebPath()
  {
    $context = sfContext::getInstance();
    $context->getConfiguration()->loadHelpers(array('Url'));
    return url_for('media/show?uuid='.$this->uuid.'&name='.$this->name);
  }
  public function setMeta($meta, $value)
  {
    $meta_store = unserialize($this->meta_store);
    $meta_store[$meta] = $value;
    $this->meta_store = serialize($meta_store);
  }
  public function getMeta($meta, $default = null)
  {
    $meta_store = unserialize($this->meta_store);
    if (isset($meta_store[$meta]))
      return $meta_store[$meta];
    return $default;
  }
  public function getExtension()
  {
    if ($this->name == '')
      return false;
    $bits = explode('.', $this->name);
    return $bits[(count($bits) - 1)];
  }
  public function isImage()
  {
    $ext = $this->extension;
    if (!$ext)
      return false;
    $image_exts = array(
      'png',
      'jpeg',
      'jpg',
      'gif',
      'bmp',
      'tiff',
    );
    return in_array($ext, $image_exts);
  }
  public function isVideo()
  {
    $ext = $this->extension;
    if (!$ext)
      return false;
    $video_exts = array(
      'mpeg',
      'quicktime',
      'msvideo',
      'asf',
      'avi',
      'fli',
      'wmv',
      'mpg',
      'mov',
      'm4v',
      'flv',
    );
    return in_array($ext, $video_exts);
  }
  public function isAudio()
  {
    $ext = $this->extension;
    if (!$ext)
      return false;
    $audio_exts = array(
      'aiff',
      'midi',
      'mp3',
      'mpeg3',
      'wav',
    );
    return in_array($ext, $audio_exts);
  }
  protected function cacheData()
  {
    if ($this->isVideo())
    {
      $this->cacheVideoData();
    }
    if ($this->isAudio())
    {
      $this->cacheAudioData();
    }
  }
  protected function cacheVideoData()
  {
    $this->loadGetID3();
    $file = $this->FileData->fetchFilePath();
    $getid3 = new getID3();
    $getid3->Analyze($file);
    $width = $getid3->info['video']['resolution_x'];
    $height = $getid3->info['video']['resolution_y'];
    $length = $getid3->info['playtime_seconds'];
    $this->setMeta('height', $height);
    $this->setMeta('width', $width);
    $this->setMeta('length', $length);
    $this->FileData->unlinkFilePath();
  }
  protected function cacheAudioData()
  {
    $this->loadGetID3();
    $file = $this->FileData->fetchFilePath();
    $getid3 = new getID3();
    $getid3->Analyze($file);
    $length = $getid3->info['playtime_seconds'];
    $this->setMeta('length', $length);
    $this->FileData->unlinkFilePath();
  }
  protected function cacheImageData()
  {
    $file = $this->FileData->fetchFilePath();
    $data = getimagesize($file);
    $this->setMeta('width', $data[0]);
    $this->setMeta('height', $data[1]);
    $this->FileData->unlinkFilePath();
  }
  public function getHeight()
  {
    if ($this->isVideo())
    {
      if ($this->getMeta('height', null) == null)
      {
        $this->cacheVideoData();
        $this->save();
      }
      return $this->getMeta('height');
    }
    if ($this->isImage())
    {
      if ($this->getMeta('height', null) == null)
      {
        $this->cacheImageData();
        $this->save();
      }
      return $this->getMeta('height');
    }
    return null;
  }
  public function getWidth()
  {
    if ($this->isVideo())
    {
      if ($this->getMeta('width', null) == null)
      {
        $this->cacheVideoData();
        $this->save();
      }
      return $this->getMeta('width');
    }
    if ($this->isImage())
    {
      if ($this->getMeta('width', null) == null)
      {
        $this->cacheImageData();
        $this->save();
      }
      return $this->getMeta('width');
    }
    return null;
  }
  public function getLength()
  {
    if ($this->isVideo())
    {
      if ($this->getMeta('length', null) == null)
      {
        $this->cacheVideoData();
        $this->save();
      }
      return $this->getMeta('length');
    }
    if ($this->isAudio())
    {
      if ($this->getMeta('length', null) == null)
      {
        $this->cacheAudioData();
        $this->save();
      }
      return $this->getMeta('length');
    }
    return null;
  }
  function getSizeFormatted($precision = 2)
  {
    $units = array('B', 'KB', 'MB', 'GB', 'TB');
    $bytes = $this->getSize();
    $bytes = max($bytes, 0);
    $pow = floor(($bytes ? log($bytes) : 0) / log(1024));
    $pow = min($pow, count($units) - 1);

    $bytes /= pow(1024, $pow);

    return round($bytes, $precision) . ' ' . $units[$pow];
  }
  public function getType()
  {
    if ($this->isImage())
      return 'Photo';
    if ($this->isAudio())
      return 'Audio';
    if ($this->isVideo())
      return 'Video';
    return 'Other';
  }

  public function __toString()
  {
    return $this->name.' ('.$this->getType().' '.$this->getSizeFormatted().')';
  }

  private function loadGetID3()
  {
    require_once(sfConfig::get('sf_plugins_dir').'/majaxDoctrineMediaPlugin/vendor/getid3/getid3.php');
  }
}
